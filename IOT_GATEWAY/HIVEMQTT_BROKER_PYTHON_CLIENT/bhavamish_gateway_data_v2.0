#!/usr/bin/env python3
import mysql.connector
import paho.mqtt.client as paho
import json
from datetime import datetime
import time

mydb = mysql.connector.connect(host='103.212.121.63', user='lotusenterprises_modbus', password='HP3vB;Pu{iM#',
                               database="lotusenterprises_modbus")
cursor1 = mydb.cursor()
cursor1.execute("show tables")
print("if no any table showing ...remote database connection error")
for i in cursor1:
    print(i)
print("Tables showing of remote database ...so connection is ok ")


def on_subscribe(client, userdata, mid, granted_qos):
    print("Subscribed: " + str(mid) + " " + str(granted_qos))


def on_message(client, userdata, msg):
    print(msg.topic + " " + str(msg.qos) + " " + str(msg.payload))
    print("MQTT BROKER CONNECTED..")
    mydb1 = mysql.connector.connect(host='103.212.121.63', user='lotusenterprises_modbus', password='HP3vB;Pu{iM#',
                                    database="lotusenterprises_modbus")
    cursor = mydb1.cursor()
    cursor.execute("show tables")
    print("if no any table showing ...remote database connection error")
    for i in cursor:
        print(i)
    print("Tables showing of remote database ...so connection is ok ")

    print("type of incoming msg without conversion:", type(msg.payload))
    m_decode = str(msg.payload.decode("utf-8")).replace("'", '"""')
    print("m_decode:", m_decode, " ", "type:", type(m_decode))
    m_in = json.loads(m_decode)
    now = datetime.now()
    dt2 = now.strftime("%Y-%m-%d %H:%M:%S'")
    print(type(m_in))
    print(m_in)
    ts = m_in["ts"]
    dt = datetime.fromtimestamp(ts)
    dt1 = dt.strftime('%Y-%m-%d %H:%M:%S')
    print("dt1:", dt1)
    d1 = m_in["1"]["data"][0]
    d2 = m_in["1"]["data"][1]
    d3 = m_in["1"]["data"][2]
    d4 = m_in["1"]["data"][3]
    d5 = m_in["1"]["data"][4]
    d8 = m_in["1"]["data"][7]
    d9 = m_in["1"]["data"][8]
    d10 = m_in["1"]["data"][9]
    d11 = m_in["1"]["data"][10]
    d12 = m_in["1"]["data"][11]
    d13 = m_in["1"]["data"][12]
    d14 = m_in["1"]["data"][13]
    d15 = m_in["1"]["data"][14]
    d16 = m_in["1"]["data"][15]
    d17 = m_in["1"]["data"][16]
    d18 = m_in["1"]["data"][17]
    d19 = m_in["1"]["data"][18]
    d20 = m_in["1"]["data"][19]
    num = d8
    bin_ = '{0:016b}'.format(num)
    print(bin_)
    b0, b1, b3, b4, b5, b6, b7 = bool(bin_[-1]), bool(bin_[-2]), bool(bin_[-4]), bool(bin_[-5]), bool(bin_[-6]), bool(bin_[-7]), bool(bin_[-8])
    b8, b9, b14, b15 = bool(bin_[-9]), bool(bin_[-10]), bool(bin_[-15]), bool(bin_[0])

    num = d9
    bin2 = '{0:016b}'.format(num)
    print(type(bin2))
    r0, r1, r3, r4, r5, r6, r7, r8, r13, r14, r15 = bool(bin2[-1]), bool(bin2[-2]), bool(bin2[-4]), bool(bin2[-5]), bool(bin2[-6]), bool(bin2[-7]), bool(bin2[
        -8]), bool(bin2[-9]), bool(bin2[-14]), bool(bin2[-15]), bool(bin2[0])
    print(bin2)

    print("still not dumped into database...")
    q = "INSERT INTO Device_A001(Air_Feed_Pressure,Air_Exhause_Temperature,Run_Time,Load_Time , Host_A_phase_Current," \
        "date_time, Run_State_1, " \
        "Run_State_2, Control_State, Oil_Filter_Used_time,Oil_Separator_Used_time,Air_Filter_used_time," \
        "Lube_Oil_used_time,Lube_grease_used_time,Load_Unload,Run_Stop,Air_Exhause_Temperature_high," \
        "Wrong_Phase_Sequence," \
        "Host_current_fault,Air_Filter_blocked,Oil_Separator_blocked,Oil_Filter_blocked,Fan_current_fault," \
        "Air_Feed_Pressure_High,Empty_Long_Stop,Alarm,Pre_alarm,Lube_Grease_time_up,Lube_Oil_time_up," \
        "Air_Filter_time_up," \
        "Oil_Separators_time_up,Oil_Filter_time_up,Air_Exhaust_Temperature_high_Pre_alarm,Water_lacking," \
        "Air_Exhaust_Temperature_Sensor_Failure,Air_Feed_Pressure_Sensor_Failure) VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s," \
        "%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s," \
        "%s,%s,%s,%s,%s) "
    v = (
    d1, d2, d3, d4, d5, dt2, d8, d9, d10, d11, d12, d13, d14, d15, b0, b1, b3, b4, b5, b6, b7, b8, b9, b14, b15, r0, r1,
    r3, r4, r5, r6, r7, r8, r13, r14, r15)
    cursor.execute(q, v)

    mydb1.commit()
    print("data dumped into database SUCCESS! pls check your database:")


print("msg topic :test/1 database table: MQTT_raw_data")
client = paho.Client()
client.on_subscribe = on_subscribe
client.on_message = on_message
# client.connect("3.12.225.17", 1883)
# client.subscribe("/STATUS/869244041774385/", qos=2)
client.connect("broker.hivemq.com", 1883)
client.subscribe("test/1", qos=2)

client.loop_forever()
